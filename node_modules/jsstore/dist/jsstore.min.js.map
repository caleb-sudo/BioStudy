{"version":3,"file":"jsstore.min.js","mappings":";+BACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,+PCF9D,IC+BYC,EAMAC,EAWAC,EAwBAC,EAQAC,EA2BAC,EAKAC,EAMAC,EDtHZ,aAMI,WAAYC,EAAcC,GACtBC,KAAKF,KAAOA,EACZE,KAAKC,MAAQF,EACbC,KAAKE,QAAUF,KAAKG,QACxB,CAoCJ,OAlCI,YAAAC,MAAA,WACI,MAAMJ,IACV,EAEA,YAAAK,IAAA,SAAIC,GACIN,KAAKO,QACLC,QAAQH,IAAIC,EAEpB,EAEA,YAAAG,SAAA,WACID,QAAQE,MAAMV,KAAKnB,MACvB,EAEA,YAAA8B,WAAA,WACIH,QAAQI,KAAKZ,KAAKnB,MACtB,EAEA,YAAAA,IAAA,WACI,MAAO,CACHqB,QAASF,KAAKE,QACdJ,KAAME,KAAKF,KAEnB,EAEQ,YAAAK,OAAR,WAOI,OALQH,KAAKF,KAEIE,KAAKE,OAI1B,EACJ,EA9CA,GCHaW,EAAa,CACtBC,oBAAqB,wBACrBC,gBAAiB,mBACjBC,eAAgB,kBAChBC,oBAAqB,wBACrBC,gBAAiB,0BACjBC,qBAAsB,yBACtBC,SAAU,YACVC,gBAAiB,oBACjBC,eAAgB,mBAChBC,aAAc,iBACdC,UAAW,mBACXC,UAAW,aACXC,cAAe,kBACfC,cAAe,kBACfC,WAAY,eACZC,kBAAmB,qBACnBC,iBAAkB,oBAClBC,UAAW,aACXC,cAAe,iBACfC,UAAW,aACXC,sBAAuB,0BACvBC,iBAAkB,sBAClBC,iBAAkB,qBAClBC,aAAc,gBACdC,oBAAqB,wBACrBC,eAAgB,mBAChBC,QAAS,UACTC,kBAAmB,qBACnBC,kBAAmB,sBACnBC,kBAAmB,sBACnBC,aAAc,mBAGlB,SAAYtD,GACR,yBACA,kBACA,0BACH,CAJD,CAAYA,IAAAA,EAAa,KAMzB,SAAYC,GACR,kBACA,kBACA,gBACA,kBACA,oBACA,cACA,sBACH,CARD,CAAYA,IAAAA,EAAS,KAWrB,SAAYC,GACR,mBACA,mBACA,mBACA,mBACA,yBACA,kBACA,kBACA,kBACA,kBACA,mBACA,gBACA,mBACA,gBACA,sCACA,wBACA,4BACA,qBACA,gBACA,wBACA,iCACA,yBACH,CAtBD,CAAYA,IAAAA,EAAG,KAwBf,SAAYC,GACR,wCACA,0CACA,oBACA,kBACA,aACH,CAND,CAAYA,IAAAA,EAAK,KAQjB,SAAYC,GACR,gBACA,cACA,gBACA,UACA,YACA,cACA,kBACA,eACA,0BACA,uBACA,kBACA,wBACA,YACA,YACA,YACA,gBACA,YACA,cACA,UACA,cACA,gBACA,YACA,0BACA,aACH,CAzBD,CAAYA,IAAAA,EAAY,KA2BxB,SAAYC,GACR,sBACA,uBACH,CAHD,CAAYA,IAAAA,EAAQ,KAKpB,SAAYC,GACR,YACA,WACA,SACH,CAJD,CAAYA,IAAAA,EAAS,KAMrB,SAAYC,GACR,wBACA,kBACA,2BACA,kCACA,qCACH,CAND,CAAYA,IAAAA,EAAiB,KCzHtB,MAAMgD,EAAU,SAAIC,GACvB,OAAO,IAAIC,QAAWD,EAC1B,ECFaE,EAAiB,SAAC3D,GAC3B,OAAO0D,QAAQE,QAAQ5D,EAC3B,ECFA,aAEI,WAAY6D,GAMJ,KAAAC,QAEJ,CAAC,EAPDnD,KAAKoD,KAAOF,CAChB,CA8DJ,OAtDI,YAAAG,GAAA,SAAGC,EAAeR,GAKd,OAJ2B,MAAvB9C,KAAKmD,QAAQG,KACbtD,KAAKmD,QAAQG,GAAS,IAE1BtD,KAAKmD,QAAQG,GAAOC,KAAKT,GAClB9C,IACX,EAEA,YAAAwD,IAAA,SAAIF,EAAeR,GACf,GAAI9C,KAAKmD,QAAQG,GACb,GAAIR,EAAI,CACJ,IAAMW,EAAQzD,KAAKmD,QAAQG,GAAOI,QAAQZ,GAC1C9C,KAAKmD,QAAQG,GAAOK,OAAOF,EAAO,EACtC,MAEIzD,KAAKmD,QAAQG,GAAS,EAGlC,EAEA,YAAAM,KAAA,SAAKN,OAAL,WAAoB,oDAChB,IAAMO,EAAS7D,KAAKmD,QAAQG,IAAU,GAClCG,EAAQ,EACNK,EAASD,EAAOC,OAChBC,EAAU,GAShB,OAAO,IAAIhB,SAAe,SAACiB,GACvB,IAAMC,EAAe,WACbR,EAAQK,EAVD,WACf,IAAMI,EAAUL,EAAOJ,KACvB,GAAIS,EAAS,CACT,IAAMC,EAASD,EAAQhF,KAAI,MAAZgF,iMAAO,EAAM,EAAKd,MAASgB,GAAI,IAC9C,OAAOD,GAAUA,EAAOE,KAAOF,EAASpB,QAAQE,QAAQkB,EAC5D,CACJ,CAKYG,GAAaD,MAAK,SAAAF,GACdJ,EAAQR,KAAKY,GACbF,GACJ,IAGAD,EAAID,EAEZ,EACAE,GACJ,GAEJ,EAEA,YAAAM,QAAA,WACIvE,KAAKmD,QAAU,KACfnD,KAAKoD,KAAO,IAChB,EACJ,EAlEA,GCSA,aA6CE,WAAYoB,GA1CJ,KAAAC,cAAe,EACf,KAAAC,WAAY,EACZ,KAAAC,cAAoC,GACpC,KAAAC,kBAAmB,EAEnB,KAAAC,kBAAoB,IAElB,KAAAC,YAA6B,GAE7B,KAAAC,UAAsB,IAAIC,EAAShF,MAGrC,KAAAiF,cAAgB,CACtBzF,EAAI0F,OACJ1F,EAAI2F,OACJ3F,EAAI4F,OACJ5F,EAAI6F,OACJ7F,EAAI8F,OACJ9F,EAAI+F,UACJ/F,EAAIgG,gBACJhG,EAAIiG,UACJjG,EAAIkG,QAKN,KAAAC,UAAW,EAED,KAAAC,OAAS,IAAIC,EAAU,MAe3BrB,GACFxE,KAAK8F,QAAUtB,EACfxE,KAAK8F,QAAQC,UAAY/F,KAAKgG,qBAAqBC,KAAKjG,QAExDA,KAAK2F,UAAW,EAChB3F,KAAKkG,oBAET,CA0NF,OAtOE,sBAAY,4BAAa,KAAzB,WACE,OAAOlG,KAAKmG,SAAWC,KAAoB,aAC7C,kCAYQ,YAAAF,kBAAR,WACE,IAAMG,EAAYrG,KAAKsG,cACnBD,IACFrG,KAAKuG,aAAe,IAAIF,EAAUG,aAAaxG,KAAKyG,sBAAsBR,KAAKjG,OAEnF,EAEQ,YAAAgG,qBAAR,SAA6B1F,GAC3BN,KAAKyG,sBAAsBnG,EAAIoG,KACjC,EAEQ,YAAAD,sBAAR,SAA8BvG,GAE5B,IAAMyG,EAAoC3G,KAAK2E,cAAciC,QAC7D,GAAID,EAAiB,CAEnB,GADA3G,KAAK4F,OAAOvF,IAAI,kBAAWsG,EAAgBE,KAAI,cAC3C3G,EAAQQ,MACViG,EAAgBG,QAAQ5G,EAAQQ,WAC3B,CACL,OAAQiG,EAAgBE,MACtB,KAAKrH,EAAI2F,OACT,KAAK3F,EAAI0F,OACPlF,KAAKyE,cAAe,EAAM,MAC5B,KAAKjF,EAAIiG,UACPzF,KAAKyE,cAAe,GACE,IAAlBzE,KAAK2F,UACP3F,KAAK8F,QAAQiB,YAEjB,KAAKvH,EAAIkG,OACP1F,KAAKyE,cAAe,EACpBzE,KAAK2E,cAAgB,GACrB3E,KAAK0E,WAAY,EACjB,MACF,KAAKlF,EAAIwH,QACPhH,KAAK0E,WAAY,EACjB1E,KAAK+E,UAAUnB,KAAKnE,EAAMwH,kBAAmB,IACzCjH,KAAK2E,cAAcb,OAAS,GAC9B9D,KAAKkH,SAAQ,GAInBP,EAAgBQ,UAAUjH,EAAQiE,OACpC,CACAnE,KAAK4E,kBAAmB,EACxB5E,KAAKoH,aACP,CACF,EAEQ,YAAAF,QAAR,SAAgBG,QAAA,IAAAA,IAAAA,GAAA,GACd,IAAMC,EAAU,CACdT,KAAMrH,EAAI2F,OACVoC,MAAO,CACLV,KAAM7G,KAAKwH,SAASX,KACpBY,QAASzH,KAAKwH,SAASC,SAEzBN,UAAW,WAEX,EACAL,QAAS,SAAUY,GACjBlH,QAAQE,MAAMgH,EAChB,GAEEL,EACFrH,KAAK2H,uBAAuBL,EAAS,GAGrCtH,KAAK2E,cAAchB,OAAO,EAAG,EAAG2D,EAEpC,EAEQ,YAAAM,mBAAR,SAA2BC,GAA3B,WACE,OAAOhF,GAAc,SAACmB,GACpB,IAAIP,EAAQ,EACNqE,EAAY,EAAKhD,YAAYhB,OAAS,EACtCiE,EAAqB,WACzB,GAAItE,GAASqE,EAAW,CACtB,IAAIE,EAAgB,EAAKlD,YAAYrB,KAASoE,GACzCG,GAAkBA,EAAc3D,OACnC2D,EAAgBhF,EAAegF,IAEjCA,EAAc3D,MAAK,SAAA4D,GACjBF,GACF,GACF,MAEE/D,GAEJ,EACA+D,GACF,GACF,EAEQ,YAAAG,qBAAR,SAA6BpD,EAAoBX,GAC/C,OAAOtB,GAAa,SAACmB,GACnB,IAAIP,EAAQ,EACNqE,EAAYhD,EAAYhB,OAAS,EACjCiE,EAAqB,WACzB,GAAItE,GAASqE,EAAW,CACtB,IAAIE,EAAgBlD,EAAYrB,KAASU,GACpC6D,EAAc3D,OACjB2D,EAAgBhF,EAAegF,IAEjCA,EAAc3D,MAAK,SAAA8D,GACjBhE,EAASgE,EACTJ,GACF,GACF,MAEE/D,EAAIG,EAER,EACA4D,GACF,GACF,EAEU,YAAAK,QAAV,SAAqBd,GAArB,WAIE,OAAO,IAAIvE,SAAQ,SAACE,EAASoF,GAC3B,IAAIvD,EAAc,GAClBwC,EAAQgB,SAAW,SAACxF,GAClBgC,EAAYvB,MAAK,SAACY,GAChB,OAAOrB,EAAGqB,EACZ,GACF,EACA,EAAKyD,mBAAmBN,GAASjD,MAAK,WACpCiD,EAAQH,UAAY,SAAChD,GACnB,EAAK+D,qBAAqBpD,EAAaX,GAAQE,MAAK,SAAA8D,GAClDlF,EAAQkF,EACV,IAAGI,OAAM,SAAAb,GACPJ,EAAQR,QAAQY,EAClB,GACF,EACAJ,EAAQR,QAAU,SAACY,GACjB5C,EAAc,GACduD,EAAOX,EACT,EACkC,IAA9B,EAAK/C,cAAcb,SACrB,EAAKiB,UAAUnB,KAAKnE,EAAM+I,mBAAoB,IAC1C,EAAK9D,WAAa,EAAKD,eACD,CAACjF,EAAI0F,OAAQ1F,EAAIwH,QAASxH,EAAIkG,OAAQlG,EAAI2F,OAAQ3F,EAAIiG,WAAW/B,QAAQ4D,EAAQT,OAAS,GAEhH,EAAKK,WAGTuB,aAAa,EAAK5D,mBAEpB,EAAK8C,uBAAuBL,EAC9B,IAAGiB,MAAMF,EACX,GACF,EAEQ,YAAAV,uBAAR,SAA+BL,EAA2B7D,GACxDzD,KAAK0E,WAAY,EACJ,MAATjB,EACFzD,KAAK2E,cAAchB,OAAOF,EAAO,EAAG6D,GAGpCtH,KAAK2E,cAAcpB,KAAK+D,GAE1BtH,KAAK4F,OAAOvF,IAAI,mBAAqBiH,EAAQT,MAC7C7G,KAAKoH,aACP,EAEQ,YAAAA,YAAR,sBACQsB,EAAqB1I,KAAK2E,cAAcb,OAC9C,IAAK9D,KAAK4E,kBAAoB8D,EAAqB,EAAG,CACpD,IAA0B,IAAtB1I,KAAKyE,aAEP,YADAzE,KAAK2I,qBAAqB3I,KAAK2E,cAAc,IAI/C,IAAMiE,EAAoB5I,KAAK2E,cAAckE,WAC3C,SAAAC,GAAQ,SAAK7D,cAAcvB,QAAQoF,EAAKjC,OAAS,CAAzC,IAIN+B,GAAqB,IACvB5I,KAAK2E,cAAchB,OACjB,EACA,EACA3D,KAAK2E,cAAchB,OAAOiF,EAAmB,GAAG,IAElD5I,KAAK2I,qBAAqB3I,KAAK2E,cAAc,IAEjD,MACgC,IAAvB+D,IAA+C,IAAnB1I,KAAK0E,WAAuB1E,KAAKyE,eACpEzE,KAAK6E,iBAAmBkE,YAAW,WACjC,EAAKpB,uBAAuB,CAC1Bd,KAAMrH,EAAIwH,QACVG,UAAW,WAEX,EACAL,QAAS,SAAUY,GACjBlH,QAAQE,MAAMgH,EAChB,GAEJ,GAAG,KAEP,EAEQ,YAAAiB,qBAAR,SAA6BrB,GAC3BtH,KAAK4E,kBAAmB,EACxB5E,KAAK4F,OAAOvF,IAAI,sBAAwBiH,EAAQT,MAChD,IAAMmC,EAAmB,CACvBnC,KAAMS,EAAQT,KACdU,MAAOD,EAAQC,QAEK,IAAlBvH,KAAK2F,SACP3F,KAAK8F,QAAQmD,YAAYD,GAGzBhJ,KAAKuG,aAAa2C,IAAIF,EAE1B,EACF,EA/QA,GCNA,aAEI,WAAoBG,GAAA,KAAAA,IAAAA,CAEpB,CA6DJ,OAnDI,YAAAtK,IAAA,SAAOL,GACH,OAAOwB,KAAKmJ,IAAa,QAAK,CAC1BtC,KAAMrH,EAAI4F,OACVmC,MAAO/I,GAEf,EASA,YAAA4K,IAAA,SAAI5K,GACA,OAAOwB,KAAKmJ,IAAa,QAAW,CAChCtC,KAAMrH,EAAI8F,OACViC,MAAO/I,GAEf,EAUA,YAAA6K,IAAA,SAAI7K,EAAaa,GACb,OAAOW,KAAKmJ,IAAa,QAAQ,CAC7BtC,KAAMrH,EAAI6F,OACVkC,MAAO,CACH/I,IAAKA,EAAKa,MAAOA,IAG7B,EASA,YAAAiK,OAAA,SAAO9K,GACH,OAAOwB,KAAKmJ,IAAa,QAAQ,CAC7BtC,KAAMrH,EAAI+F,UACVgC,MAAO/I,GAEf,EACJ,EAjEA,scCKA,cAEI,WAAYgG,GACR,QAAK,UAACA,IAAO,YAwLjB,EAAA+E,IAAM,IAAIC,EAAW,IAvLrB,CAiSJ,OArSgC,EAAAC,EAAA,GAa5B,YAAAC,OAAA,SAAOC,GAAP,WAEI,OADA3J,KAAKwH,SAAWmC,EACT3J,KAAKoI,QAAQ,CAChBvB,KAAMrH,EAAI0F,OACVqC,MAAOoC,IACRtF,MAAK,SAACF,GACL,IAAIyF,EACEC,EAAK1F,EAAOqD,SAUlB,OARIrD,EAAO2F,YAEHF,EADAzF,EAAO4F,WACM,EAAKhF,UAAUnB,KAAKnE,EAAMuK,QAASH,EAAI1F,EAAO4F,WAAY5F,EAAO8F,YAGjE,EAAKlF,UAAUnB,KAAKnE,EAAMyK,OAAQL,KAG/CD,GAAc5G,KAAkBqB,MAAK,SAAA4D,GACzC,OAAO,EAAKlD,UAAUnB,KAAKnE,EAAM0K,KAAMN,EAC3C,IAAGxF,MAAK,SAAA4D,GACJ,OAAO9D,EAAO2F,SAClB,GACJ,GACJ,EAQA,YAAAM,OAAA,WACI,OAAOpK,KAAKoI,QAAc,CACtBvB,KAAMrH,EAAIkG,QAElB,EAUA,YAAA2E,OAAA,SAAU9C,GACN,OAAOvH,KAAKoI,QAAa,CACrBvB,KAAMrH,EAAI8K,OACV/C,MAAOA,GAEf,EASA,YAAAgD,MAAA,SAAMhD,GACF,OAAOvH,KAAKoI,QAAgB,CACxBvB,KAAMrH,EAAIgL,MACVjD,MAAOA,GAEf,EAUA,YAAAkD,OAAA,SAAUlD,GACN,OAAOvH,KAAKoI,QAAsB,CAC9BvB,KAAMrH,EAAIkL,OACVnD,MAAOA,GAEf,EASA,YAAAoD,OAAA,SAAOpD,GACH,OAAOvH,KAAKoI,QAAgB,CACxBvB,KAAMrH,EAAIoL,OACVrD,MAAOA,GAEf,EASA,YAAAsD,OAAA,SAAOtD,GACH,OAAOvH,KAAKoI,QAAgB,CACxBvB,KAAMrH,EAAIsL,OACVvD,MAAOA,GAEf,EASA,YAAAwD,MAAA,SAAMC,GACF,OAAOhL,KAAKoI,QAAc,CACtBvB,KAAMrH,EAAIyL,MACV1D,MAAOyD,GAEf,EAQA,sBAAI,wBAAS,KAAb,SAAczK,GACVP,KAAK4F,OAAOrF,OAASA,EACrBP,KAAKoI,QAAQ,CACTvB,KAAMrH,EAAIgG,gBACV+B,MAAOhH,GAEf,kCASA,YAAA2K,OAAA,SAAOC,EAAgB1D,GAAvB,WACI,OAAOzH,KAAKoI,QAAmB,CAC3BvB,KAAMrH,EAAI2F,OACVoC,MAAO,CACHE,QAASA,EACTZ,KAAMsE,KAEX9G,MAAK,SAACsF,GAEL,OADA,EAAKnC,SAAWmC,EACTA,CACX,GACJ,EAQA,YAAAyB,UAAA,WAEI,OADA5K,QAAQI,KAAK,+EACLyK,UAAkBC,WAC9B,EAkBA,YAAAzM,IAAA,SAAOL,GAEH,OADAgC,QAAQI,KAAK,wCACNZ,KAAKuJ,IAAI1K,IAAOL,EAC3B,EAUA,YAAA6K,IAAA,SAAI7K,EAAaa,GAEb,OADAmB,QAAQI,KAAK,wCACNZ,KAAKuJ,IAAIF,IAAI7K,EAAKa,EAC7B,EAQA,YAAA0H,UAAA,WACI,OAAO/G,KAAKoI,QAAc,CACtBvB,KAAMrH,EAAIiG,WAElB,EAUA,YAAA8F,YAAA,SAAehE,GACX,OAAOvH,KAAKoI,QAAW,CACnBvB,KAAMrH,EAAIgM,YACVjE,MAAOA,GAEf,EAEA,YAAAlE,GAAA,SAAGC,EAAcmI,GACbzL,KAAK+E,UAAU1B,GAAGC,EAAOmI,EAC7B,EAEA,YAAAjI,IAAA,SAAIF,EAAcmI,GACdzL,KAAK+E,UAAUvB,IAAIF,EAAOmI,EAC9B,EAEA,YAAAC,MAAA,SAASnE,GACL,OAAOvH,KAAKoI,QAAW,CACnBvB,KAAMrH,EAAImM,MACVpE,MAAK,GAEb,EAEA,YAAAqE,UAAA,SAAarE,GACT,OAAOvH,KAAKoI,QAAW,CACnBvB,KAAMrH,EAAIqM,UACVtE,MAAK,GAEb,EAEA,YAAAuE,UAAA,SAAUC,EAAiBC,GACvB,OAAOD,EAAOE,MAAMjM,KAAMgM,EAC9B,EAEA,YAAAE,cAAA,SAAcC,EAAkCC,GAC5C,OAAIA,EACOpM,KAAKoI,QAAQ,CAChBvB,KAAMrH,EAAI6M,WACV9E,MAAO4E,KAGfnM,KAAK8E,YAAYvB,KAAK4I,GACfpJ,QAAQE,UACnB,EAUA,YAAAqJ,cAAA,eAAc,sDACV,OAAOtM,KAAKoI,QAAc,CACtBvB,KAAMrH,EAAI+M,cACVhF,MAAOiF,GAEf,EACJ,EArSA,CAAgCC,GCRnBC,EAAa,SAAIC,GAC1B,OAAO5J,QAAQ6J,IAAOD,EAC1B,ECFaE,EAAS,SAAC/N,EAAagE,GAChC,IAAK,IAAMtE,KAAOM,EACdgE,EAAGtE,EAAKM,EAAIN,GAEpB","sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/webpack/runtime/define property getters","webpack://JsStore/webpack/runtime/hasOwnProperty shorthand","webpack://JsStore/webpack/runtime/make namespace object","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/common/enums.ts","webpack://JsStore/./src/common/utils/promise.ts","webpack://JsStore/./src/common/utils/promise_resolve.ts","webpack://JsStore/./src/main/event_bus.ts","webpack://JsStore/./src/main/connection_helper.ts","webpack://JsStore/./src/main/map.ts","webpack://JsStore/./src/main/connection.ts","webpack://JsStore/./src/common/utils/promise_all.ts","webpack://JsStore/./src/common/utils/for_obj.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { ERROR_TYPE, IError } from \"../common/index\";\n\nexport class LogHelper implements IError {\n    type: string;\n    message: string;\n    private _info: any;\n    status: boolean;\n\n    constructor(type: string, info?) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this;\n    }\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","export const ERROR_TYPE = {\n    InvalidUpdateColumn: \"invalid_update_column\",\n    UndefinedColumn: \"undefined_column\",\n    UndefinedValue: \"undefined_value\",\n    UndefinedColumnName: \"undefined_column_name\",\n    UndefinedDbName: \"undefined_database_name\",\n    UndefinedColumnValue: \"undefined_column_value\",\n    NotArray: \"not_array\",\n    NoValueSupplied: \"no_value_supplied\",\n    ColumnNotExist: \"column_not_exist\",\n    NoIndexFound: \"no_index_found\",\n    InvalidOp: \"invalid_operator\",\n    NullValue: \"null_value\",\n    WrongDataType: \"wrong_data_type\",\n    TableNotExist: \"table_not_exist\",\n    DbNotExist: \"db_not_exist\",\n    ConnectionAborted: \"connection_aborted\",\n    ConnectionClosed: \"connection_closed\",\n    NotObject: \"not_object\",\n    InvalidConfig: \"invalid_config\",\n    DbBlocked: \"Db_blocked\",\n    IndexedDbNotSupported: \"indexeddb_not_supported\",\n    NullValueInWhere: \"null_value_in_where\",\n    InvalidJoinQuery: 'invalid_join_query',\n    InvalidQuery: 'invalid_query',\n    ImportScriptsFailed: 'import_scripts_failed',\n    MethodNotExist: 'method_not_exist',\n    Unknown: \"unknown\",\n    InvalidMiddleware: \"invalid_middleware\",\n    InvalidOrderQuery: 'invalid_order_query',\n    InvalidGroupQuery: 'invalid_group_query',\n    NoPrimaryKey: 'no_primary_key'\n};\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\n\nexport enum API {\n    InitDb = \"init_db\",\n    MapGet = \"map_get\",\n    MapSet = \"map_set\",\n    MapHas = \"map_has\",\n    MapDelete = \"map_delete\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n    Middleware = \"middleware\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\",\n    Upgrade = \"upgrade\",\n    Create = \"create\",\n    Open = \"open\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    List = \"list\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}\n","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","export const promiseResolve = (value?) => {\n    return Promise.resolve(value);\n}","export class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        let index = 0;\n        const length = events.length;\n        const results = [];\n        const callMethod = () => {\n            const eventCb = events[index++];\n            if (eventCb) {\n                const result = eventCb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            }\n        };\n\n        return new Promise<any[]>((res) => {\n            const checkAndCall = () => {\n                if (index < length) {\n                    callMethod().then(result => {\n                        results.push(result);\n                        checkAndCall();\n                    });\n                }\n                else {\n                    res(results);\n                }\n            };\n            checkAndCall();\n        });\n\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport {\n  WebWorkerRequest, API, WebWorkerResult,\n  EVENT, promise, IDataBase, IDbInfo, TMiddleware,\n  promiseResolve\n} from \"../common\";\nimport { EventBus } from \"./event_bus\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected database: IDataBase;\n  private worker_: Worker;\n  private isConOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected middlewares: TMiddleware[] = [];\n\n  protected eventBus_: EventBus = new EventBus(this);\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.OpenDb,\n    API.MapGet,\n    API.MapSet,\n    API.MapHas,\n    API.MapDelete,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.DropDb\n  ];\n\n  private queryManager;\n\n  isWorker = true;\n\n  protected logger = new LogHelper(null);\n\n  /**\n   * injected by jsstore worker plugin\n   *\n   * @private\n   * @memberof ConnectionHelper\n   */\n  private $worker;\n\n  private get jsstoreWorker() {\n    return this.$worker || self['JsStoreWorker'];\n  }\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      this.isWorker = false;\n      this.initQueryManager_();\n    }\n  }\n\n  private initQueryManager_() {\n    const workerRef = this.jsstoreWorker;\n    if (workerRef) {\n      this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));\n    }\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      this.logger.log(`request ${finishedRequest.name} finished`);\n      if (message.error) {\n        finishedRequest.onError(message.error);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isConOpened_ = true; break;\n          case API.Terminate:\n            this.isConOpened_ = false;\n            if (this.isWorker === true) {\n              this.worker_.terminate();\n            }\n          case API.DropDb:\n            this.isConOpened_ = false;\n            this.requestQueue_ = [];\n            this.isDbIdle_ = true;\n            break;\n          case API.CloseDb:\n            this.isDbIdle_ = true;\n            this.eventBus_.emit(EVENT.RequestQueueEmpty, []);\n            if (this.requestQueue_.length > 0) {\n              this.openDb_(false);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.result);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_(execute = true) {\n    const request = {\n      name: API.OpenDb,\n      query: {\n        name: this.database.name,\n        version: this.database.version\n      } as IDbInfo,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    };\n    if (execute) {\n      this.prcoessExecutionOfQry_(request, 0);\n    }\n    else {\n      this.requestQueue_.splice(0, 0, request);\n    }\n  }\n\n  private executeMiddleware_(input: WebWorkerRequest) {\n    return promise<void>((res) => {\n      let index = 0;\n      const lastIndex = this.middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = this.middlewares[index++](input);\n          if (!promiseResult || !promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(_ => {\n            callNextMiddleware();\n          });\n        }\n        else {\n          res();\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  private callResultMiddleware(middlewares: any[], result) {\n    return promise<any>((res) => {\n      let index = 0;\n      const lastIndex = middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = middlewares[index++](result);\n          if (!promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(modifiedResult => {\n            result = modifiedResult;\n            callNextMiddleware();\n          });\n        }\n        else {\n          res(result);\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n    if (process.env.NODE_ENV !== 'production' && !this.jsstoreWorker && !this.worker_) {\n      throw new Error(`JsStoreWorker not found. Either pass web worker or inject JsStore Worker.`);\n    }\n    return new Promise((resolve, reject) => {\n      let middlewares = [];\n      request.onResult = (cb) => {\n        middlewares.push((result) => {\n          return cb(result);\n        });\n      };\n      this.executeMiddleware_(request).then(() => {\n        request.onSuccess = (result) => {\n          this.callResultMiddleware(middlewares, result).then(modifiedResult => {\n            resolve(modifiedResult);\n          }).catch(err => {\n            request.onError(err);\n          });\n        };\n        request.onError = (err) => {\n          middlewares = [];\n          reject(err);\n        };\n        if (this.requestQueue_.length === 0) {\n          this.eventBus_.emit(EVENT.RequestQueueFilled, []);\n          if (this.isDbIdle_ && this.isConOpened_) {\n            const isConnectionApi = [API.InitDb, API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;\n            if (!isConnectionApi) {\n              this.openDb_();\n            }\n          }\n          clearTimeout(this.inactivityTimer_);\n        }\n        this.prcoessExecutionOfQry_(request);\n      }).catch(reject);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    this.logger.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isConOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    this.logger.log(\"request executing: \" + request.name);\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (this.isWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      this.queryManager.run(requestForWorker);\n    }\n  }\n}\n","import { API, SetQuery } from \"../common\";\nimport { Connection } from \"./connection\";\n\nexport class JsStoreMap {\n\n    constructor(private con: Connection) {\n\n    }\n\n    /**\n     * Returns the value associated to the passed key, or undefined if there is none.\n     * \n     * @template T\n     * @param {string} key\n     * @return {*} \n     * @memberof JsStoreMap\n     */\n    get<T>(key: string) {\n        return this.con['pushApi']<T>({\n            name: API.MapGet,\n            query: key\n        });\n    }\n\n    /**\n     * Returns a boolean indicating whether a value has been associated with the passed key in the MapStore or not. \n     *\n     * @param {string} key\n     * @return {*} \n     * @memberof JsStoreMap\n     */\n    has(key: string) {\n        return this.con['pushApi']<boolean>({\n            name: API.MapHas,\n            query: key\n        });\n    }\n\n    /**\n     * Sets the value for the passed key in the map store\n     *\n     * @param {string} key\n     * @param {*} value\n     * @return {*} \n     * @memberof JsStoreMap\n     */\n    set(key: string, value: any) {\n        return this.con['pushApi']<void>({\n            name: API.MapSet,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * delete the value by key in the map store\n     *\n     * @param {string} key\n     * @return {*} \n     * @memberof JsStoreMap\n     */\n    delete(key: string) {\n        return this.con['pushApi']<void>({\n            name: API.MapDelete,\n            query: key\n        });\n    }\n}","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    ISelectQuery, ICountQuery, IInsertQuery, SetQuery,\n    IUpdateQuery, IRemoveQuery, ITransactionQuery,\n    API, IDataBase, EVENT, IPlugin, IIntersectQuery, IDbInfo, TMiddleware, promiseResolve, InitDbResult\n} from \"../common\";\nimport { JsStoreMap } from \"./map\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     * initiate DataBase\n     *\n     * @param {IDataBase} dataBase\n     * @returns\n     * @memberof Connection\n     */\n    initDb(dataBase: IDataBase) {\n        this.database = dataBase;\n        return this.pushApi({\n            name: API.InitDb,\n            query: dataBase\n        }).then((result: InitDbResult) => {\n            let promiseObj: Promise<any>;\n            const db = result.database;\n            // db.tables = db.tables.filter(table => table.name !== 'JsStore_Meta');\n            if (result.isCreated) {\n                if (result.oldVersion) {\n                    promiseObj = this.eventBus_.emit(EVENT.Upgrade, db, result.oldVersion, result.newVersion);\n                }\n                else {\n                    promiseObj = this.eventBus_.emit(EVENT.Create, db);\n                }\n            }\n            return (promiseObj || promiseResolve()).then(_ => {\n                return this.eventBus_.emit(EVENT.Open, db);\n            }).then(_ => {\n                return result.isCreated;\n            });\n        });\n    }\n\n    /**\n     * drop dataBase\n     *\n     * @returns\n     * @memberof Connection\n     */\n    dropDb() {\n        return this.pushApi<void>({\n            name: API.DropDb\n        });\n    }\n\n    /**\n     * select data from table\n     *\n     * @template T\n     * @param {ISelectQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    select<T>(query: ISelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     *\n     * @param {ICountQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    count(query: ICountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     *\n     * @template T\n     * @param {IInsertQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    insert<T>(query: IInsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     *\n     * @param {IUpdateQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    update(query: IUpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     *\n     * @param {IRemoveQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    remove(query: IRemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     *\n     * @param {string} tableName\n     * @returns\n     * @memberof Connection\n     */\n    clear(tableName: string) {\n        return this.pushApi<void>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     *\n     * @param {boolean} status\n     * @memberof Connection\n     */\n    set logStatus(status: boolean) {\n        this.logger.status = status;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: status\n        });\n    }\n\n    /**\n     * open database\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Connection\n     */\n    openDb(dbName: string, version?) {\n        return this.pushApi<IDataBase>({\n            name: API.OpenDb,\n            query: {\n                version: version,\n                name: dbName\n            } as IDbInfo\n        }).then((dataBase) => {\n            this.database = dataBase;\n            return dataBase;\n        });\n    }\n\n    /**\n     * returns list of database created\n     *\n     * @returns\n     * @memberof Connection\n     */\n    getDbList(): Promise<[IDbInfo]> {\n        console.warn(\"Api getDbList is recommended to use for debugging only. Do not use in code.\");\n        return (indexedDB as any).databases();\n    }\n\n    /**\n     * stores data in the key value format\n     *\n     * @memberof Connection\n     */\n    // tslint:disable-next-line\n    Map = new JsStoreMap(this);\n\n    /**\n     * get the value from keystore table\n     *\n     * @template T\n     * @param {string} key\n     * @returns\n     * @memberof Connection\n     */\n    get<T>(key: string) {\n        console.warn(`This API is obsolete, please use Map`);\n        return this.Map.get<T>(key);\n    }\n\n    /**\n     * set the value in keystore table \n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns\n     * @memberof Connection\n     */\n    set(key: string, value: any) {\n        console.warn(`This API is obsolete, please use Map`);\n        return this.Map.set(key, value);\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Connection\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate\n        });\n    }\n\n    /**\n     * execute transaction\n     *\n     * @template T\n     * @param {ITransactionQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    transaction<T>(query: ITransactionQuery) {\n        return this.pushApi<T>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.on(event, eventCallBack);\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.off(event, eventCallBack);\n    }\n\n    union<T>(query: ISelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n\n    intersect<T>(query: IIntersectQuery) {\n        return this.pushApi<T>({\n            name: API.Intersect,\n            query\n        });\n    }\n\n    addPlugin(plugin: IPlugin, params?) {\n        return plugin.setup(this, params);\n    }\n\n    addMiddleware(middleware: TMiddleware | string, forWorker: boolean) {\n        if (forWorker) {\n            return this.pushApi({\n                name: API.Middleware,\n                query: middleware\n            });\n        }\n        this.middlewares.push(middleware as TMiddleware);\n        return Promise.resolve();\n    }\n\n    /**\n     * import scripts in jsstore web worker. \n     * Scripts method can be called using transaction api.\n     * \n     * @param {...string[]} urls\n     * @returns\n     * @memberof Connection\n     */\n    importScripts(...urls: string[]) {\n        return this.pushApi<void>({\n            name: API.ImportScripts,\n            query: urls\n        });\n    }\n}\n","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const forObj = (obj: object, cb: (key, value) => void) => {\n    for (const key in obj) {\n        cb(key, obj[key]);\n    }\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","type","info","this","_info","message","getMsg","throw","log","msg","status","console","logError","error","logWarning","warn","ERROR_TYPE","InvalidUpdateColumn","UndefinedColumn","UndefinedValue","UndefinedColumnName","UndefinedDbName","UndefinedColumnValue","NotArray","NoValueSupplied","ColumnNotExist","NoIndexFound","InvalidOp","NullValue","WrongDataType","TableNotExist","DbNotExist","ConnectionAborted","ConnectionClosed","NotObject","InvalidConfig","DbBlocked","IndexedDbNotSupported","NullValueInWhere","InvalidJoinQuery","InvalidQuery","ImportScriptsFailed","MethodNotExist","Unknown","InvalidMiddleware","InvalidOrderQuery","InvalidGroupQuery","NoPrimaryKey","promise","cb","Promise","promiseResolve","resolve","ctx","_events","_ctx","on","event","push","off","index","indexOf","splice","emit","events","length","results","res","checkAndCall","eventCb","result","args","then","callMethod","destroy","worker","isConOpened_","isDbIdle_","requestQueue_","isCodeExecuting_","inactivityTimer_","middlewares","eventBus_","EventBus","whiteListApi_","InitDb","OpenDb","MapGet","MapSet","MapHas","MapDelete","ChangeLogStatus","Terminate","DropDb","isWorker","logger","LogHelper","worker_","onmessage","onMessageFromWorker_","bind","initQueryManager_","$worker","self","workerRef","jsstoreWorker","queryManager","QueryManager","processFinishedQuery_","data","finishedRequest","shift","name","onError","terminate","CloseDb","RequestQueueEmpty","openDb_","onSuccess","executeQry_","execute","request","query","database","version","err","prcoessExecutionOfQry_","executeMiddleware_","input","lastIndex","callNextMiddleware","promiseResult","_","callResultMiddleware","modifiedResult","pushApi","reject","onResult","catch","RequestQueueFilled","clearTimeout","requestQueueLength","sendRequestToWorker_","allowedQueryIndex","findIndex","item","setTimeout","requestForWorker","postMessage","run","con","has","set","delete","Map","JsStoreMap","Connection","initDb","dataBase","promiseObj","db","isCreated","oldVersion","Upgrade","newVersion","Create","Open","dropDb","select","Select","count","Count","insert","Insert","update","Update","remove","Remove","clear","tableName","Clear","openDb","dbName","getDbList","indexedDB","databases","transaction","Transaction","eventCallBack","union","Union","intersect","Intersect","addPlugin","plugin","params","setup","addMiddleware","middleware","forWorker","Middleware","importScripts","ImportScripts","urls","ConnectionHelper","promiseAll","promises","all","forObj"],"sourceRoot":""}